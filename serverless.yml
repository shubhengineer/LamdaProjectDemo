service: symbolCheck

frameworkVersion: '2'

custom:
  businessTable: 'businessinfo'
  symbolTable: 'symbol-check'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["SymbolDynamoDB", "Arn" ] }
        - { "Fn::GetAtt": ["BusinessTable", "Arn" ] }
  environment:
    AWS_COGNITO_USER_POOL_ID: "us-west-2_X27UuxhKR"
    AWS_COGNITO_CLIENT_ID: "1srivc0evf8qd6jeb6jgjb5nqf"
    AWS_COGNITO_REGION: "us-west-2"
    AWS_COGNITO_IDENTITY_POOL_ID: "us-west-2:72297353-88b5-4567-8e12-b521427a746d"
    SYMBOL_TABLE: ${self:custom.symbolTable}
    BUSINESS_TABLE: ${self:custom.businessTable}

plugins:
  - serverless-offline


functions:
  createAccount:
    handler: api/auth/createAccount.submit
    memorySize: 128
    description: Sign up user.
    events:
      - http: 
          path: createAccount
          method: post
  signIn:
    handler: api/auth/signIn.submit
    memorySize: 128
    description: Sign in user.
    events:
      - http: 
          path: signIn
          method: post
  verifyAccount:
    handler: api/auth/verifyAccount.submit
    memorySize: 128
    description: Verify User.
    events:
      - http: 
          path: verifyAccount
          method: post
  symbolCheck:
    handler: api/symbol/symbolCheck.submit
    memorySize: 128
    description: Verify User.
    events:
      - http: 
          path: symbol-check
          method: post
  createBusiness:
    handler: api/businessdetail/createBusiness.submit
    memorySize: 128
    description: create business detail.
    events:
      - http: 
          path: createBusiness
          method: post

resources:
  Resources:
    SymbolDynamoDB:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: symbolId
            AttributeType: S
        KeySchema:
          -
            AttributeName: symbolId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.symbolTable}
    BusinessTable:
      Properties:
        AttributeDefinitions:
          -
            AttributeName: businessId
            AttributeType: S
        KeySchema:
          -
            AttributeName: businessId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.businessTable}
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
